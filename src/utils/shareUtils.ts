
import { SubscriptionData } from '@/types/subscriptionTypes';
import { supabase } from '@/integrations/supabase/client';

/**
 * Version 2.3.1
 * - Adicionada ordena√ß√£o por data nas assinaturas da tela inicial
 * - Criados utilit√°rios de data para ordena√ß√£o consistente
 * 
 * Version 2.3.0
 * - Vers√£o atualizada ap√≥s revers√£o para commit anterior
 * 
 * Version 3.0.6
 * - Adicionados emojis simples e compat√≠veis com WhatsApp
 * - Testado com emojis que funcionam corretamente na codifica√ß√£o URL
 * - Mantida compatibilidade com Telegram
 * 
 * Version 3.0.5
 * - Removida valida√ß√£o desnecess√°ria de configura√ß√£o
 * - Corrigida fun√ß√£o isAutoPostingEnabled para verificar apenas a configura√ß√£o
 * - Simplificada l√≥gica de verifica√ß√£o de postagem autom√°tica
 * 
 * Version 3.0.4
 * - Corrigido par√¢metro onConflict que deve ser string, n√£o array
 * - Melhorada fun√ß√£o ensureDefaultConfig para usar upsert corretamente
 * 
 * Version 3.0.3
 * - Corrigidas fun√ß√µes sendToTelegramGroup e deleteFromTelegramGroup
 * - Adicionada fun√ß√£o isAutoPostingEnabled para verificar configura√ß√£o
 * - Melhorada integra√ß√£o com Telegram
 * 
 * Version 3.0.2
 * - Adicionadas fun√ß√µes de compartilhamento para WhatsApp e Telegram
 * - Melhorada formata√ß√£o de mensagens com emojis compat√≠veis
 * - Corrigida codifica√ß√£o de URLs para evitar problemas com caracteres especiais
 * 
 * Version 3.0.1
 * - Adicionado sistema de compartilhamento autom√°tico via Telegram
 * - Integra√ß√£o com edge function para envio de mensagens
 * - Suporte a configura√ß√µes din√¢micas para URLs e tokens
 * 
 * Version 3.0.0
 * - Refatorado sistema de compartilhamento
 * - Melhorada formata√ß√£o de mensagens
 * - Adicionado suporte a m√∫ltiplas plataformas
 */

// Export the current version as a constant for use throughout the app
export const APP_VERSION = "2.3.1";

const telegramApiUrl = process.env.NEXT_PUBLIC_TELEGRAM_API_URL;
const telegramBotToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
const telegramChatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID;
const edgeFunctionUrl = process.env.NEXT_PUBLIC_EDGE_FUNCTION_URL;

async function ensureDefaultConfig(key: string, defaultValue: string, description: string) {
  try {
    const { data, error } = await supabase
      .from('site_configurations')
      .upsert(
        { key: key, value: defaultValue, description: description },
        { onConflict: 'key' }
      );

    if (error) {
      console.error(`Erro ao inserir/atualizar configura√ß√£o padr√£o ${key}:`, error);
    } else {
      console.log(`Configura√ß√£o padr√£o ${key} verificada/atualizada com sucesso.`);
    }
  } catch (error) {
    console.error(`Erro ao inserir/atualizar configura√ß√£o padr√£o ${key}:`, error);
  }
}

export async function sendToTelegramGroup(subscriptionId: string): Promise<any> {
    try {
        if (!telegramApiUrl || !telegramBotToken || !telegramChatId || !edgeFunctionUrl) {
            console.warn("Vari√°veis de ambiente do Telegram n√£o configuradas.");
            return { success: false, message: "Telegram n√£o configurado." };
        }

        // Buscar os dados da assinatura no Supabase
        const { data: subscription, error: subscriptionError } = await supabase
            .from('subscriptions')
            .select('*')
            .eq('id', subscriptionId)
            .single();

        if (subscriptionError) {
            console.error("Erro ao buscar detalhes da assinatura:", subscriptionError);
            return { success: false, message: "Erro ao buscar detalhes da assinatura." };
        }

        if (!subscription) {
            console.warn("Assinatura n√£o encontrada com ID:", subscriptionId);
            return { success: false, message: "Assinatura n√£o encontrada." };
        }

        // Formatar a mensagem com emojis e quebras de linha
        const message = `
üéâ Nova assinatura adicionada! üéâ

T√≠tulo: ${subscription.title}
Pre√ßo: ${subscription.price}
Forma de Pagamento: ${subscription.payment_method}
Status: ${subscription.status}
Envio: ${subscription.access}

Entre em contato:
üì± WhatsApp: ${subscription.whatsapp_number || 'N√£o informado'}
üì© Telegram: ${subscription.telegram_username ? `@${subscription.telegram_username}` : 'N√£o informado'}
        `;

        // Codificar a mensagem para a URL
        const encodedMessage = encodeURIComponent(message);

  const functionURL = `${edgeFunctionUrl}?subscriptionId=${subscriptionId}&message=${encodedMessage}`;

        // Enviar a mensagem usando a Edge Function
        const response = await fetch(functionURL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        const result = await response.json();

        if (result.success) {
            console.log("Mensagem enviada para o Telegram com sucesso!");
            return { success: true, message: "Mensagem enviada para o Telegram com sucesso!" };
        } else {
            console.error("Falha ao enviar mensagem para o Telegram:", result.message);
            return { success: false, message: "Falha ao enviar mensagem para o Telegram." };
        }

    } catch (error: any) {
        console.error("Erro ao enviar mensagem para o Telegram:", error);
        return { success: false, message: "Erro ao enviar mensagem para o Telegram." };
    }
}

export async function deleteFromTelegramGroup(subscriptionId: string): Promise<any> {
    try {
        if (!telegramApiUrl || !telegramBotToken || !telegramChatId || !edgeFunctionUrl) {
            console.warn("Vari√°veis de ambiente do Telegram n√£o configuradas.");
            return { success: false, message: "Telegram n√£o configurado." };
        }

        // Buscar o c√≥digo da mensagem no Supabase
        const { data: subscription, error: subscriptionError } = await supabase
            .from('subscriptions')
            .select('code')
            .eq('id', subscriptionId)
            .single();

        if (subscriptionError) {
            console.error("Erro ao buscar c√≥digo da assinatura:", subscriptionError);
            return { success: false, message: "Erro ao buscar c√≥digo da assinatura." };
        }

        if (!subscription || !subscription.code) {
            console.warn("C√≥digo da assinatura n√£o encontrado para o ID:", subscriptionId);
            return { success: false, message: "C√≥digo da assinatura n√£o encontrado." };
        }

        // Usar o c√≥digo da assinatura como message_id
        const messageId = subscription.code;

        const deleteURL = `${telegramApiUrl}/bot${telegramBotToken}/deleteMessage?chat_id=${telegramChatId}&message_id=${messageId}`;

        // Enviar a solicita√ß√£o para excluir a mensagem
        const response = await fetch(deleteURL, {
            method: 'POST',
        });

        const result = await response.json();

        if (result.ok) {
            console.log(`Mensagem ${messageId} exclu√≠da do Telegram com sucesso!`);
            return { success: true, message: `Mensagem ${messageId} exclu√≠da do Telegram com sucesso!` };
        } else {
            console.error(`Falha ao excluir mensagem ${messageId} do Telegram:`, result);
            return { success: false, message: `Falha ao excluir mensagem ${messageId} do Telegram.` };
        }

    } catch (error: any) {
        console.error("Erro ao excluir mensagem do Telegram:", error);
        return { success: false, message: "Erro ao excluir mensagem do Telegram." };
    }
}

export async function isAutoPostingEnabled(): Promise<boolean> {
  try {
    const { data, error } = await supabase
      .from('site_configurations')
      .select('value')
      .eq('key', 'auto_post_to_telegram')
      .single();

    if (error) {
      console.error("Erro ao verificar configura√ß√£o de auto_post_to_telegram:", error);
      return false;
    }

    if (!data) {
      console.warn("Configura√ß√£o auto_post_to_telegram n√£o encontrada, desativando.");
      return false;
    }

    return data.value === 'true';
  } catch (error) {
    console.error("Erro ao verificar configura√ß√£o de auto_post_to_telegram:", error);
    return false;
  }
}

// Fun√ß√£o para gerar links de compartilhamento do WhatsApp
export function getWhatsAppShareLink(subscription: SubscriptionData): string {
  const message = `
üéâ *${subscription.title}*

üí∞ Pre√ßo: *${subscription.price}*
üîÑ Forma de Pagamento: ${subscription.paymentMethod}
üìä Status: ${subscription.status}
üîê Acesso: ${subscription.access}

Entre em contato comigo para mais informa√ß√µes!
  `.trim();

  const encodedMessage = encodeURIComponent(message);
  return `https://wa.me/?text=${encodedMessage}`;
}

// Fun√ß√£o para gerar links de compartilhamento do Telegram
export function getTelegramShareLink(subscription: SubscriptionData): string {
  const message = `
üéâ *${subscription.title}*

üí∞ Pre√ßo: *${subscription.price}*
üîÑ Forma de Pagamento: ${subscription.paymentMethod}
üìä Status: ${subscription.status}
üîê Acesso: ${subscription.access}

Entre em contato comigo para mais informa√ß√µes!
  `.trim();

  const encodedMessage = encodeURIComponent(message);
  return `https://t.me/share/url?text=${encodedMessage}`;
}

// Fun√ß√£o para convers√£o segura para booleano
export function toBooleanSafe(value: any): boolean {
  if (typeof value === 'boolean') {
    return value;
  }
  if (typeof value === 'string') {
    return value.toLowerCase() === 'true';
  }
  return Boolean(value);
}

// Fun√ß√£o para atualizar status de postagem autom√°tica
export async function updateAutoPostingStatus(enabled: boolean): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('site_configurations')
      .upsert(
        { 
          key: 'auto_post_to_telegram', 
          value: enabled.toString(), 
          description: 'Configura√ß√£o para postagem autom√°tica no Telegram' 
        },
        { onConflict: 'key' }
      );

    if (error) {
      console.error('Erro ao atualizar configura√ß√£o de postagem autom√°tica:', error);
      return false;
    }

    console.log('Configura√ß√£o de postagem autom√°tica atualizada com sucesso:', enabled);
    return true;
  } catch (error) {
    console.error('Erro ao atualizar configura√ß√£o de postagem autom√°tica:', error);
    return false;
  }
}
